@mixin above-nav-mobile {
  @media (min-width: #{$size-nav-mobile + 1}) {
    @content;
  }
}

@mixin nav-mobile {
  @media (max-width: #{$size-nav-mobile}) {
    @content;
  }
}

@mixin above-extra-large-desktop {
  @media (min-width: #{$size-extra-large-desktop + 1}) {
    @content;
  }
}

@mixin extra-large-desktop {
  @media (max-width: #{$size-extra-large-desktop}) {
    @content;
  }
}

@mixin above-large-desktop {
  @media (min-width: #{$size-large-desktop + 1}) {
    @content;
  }
}

@mixin large-desktop {
  @media (max-width: #{$size-large-desktop}) {
    @content;
  }
}

@mixin above-medium-desktop {
  @media (min-width: #{$size-medium-desktop + 1}) {
    @content;
  }
}

@mixin medium-desktop {
  @media (max-width: #{$size-medium-desktop}) {
    @content;
  }
}

@mixin above-small-desktop {
  @media (min-width: #{$size-small-desktop + 1}) {
    @content;
  }
}

@mixin small-desktop {
  @media (max-width: #{$size-small-desktop}) {
    @content;
  }
}

@mixin above-tablet {
  @media (min-width: #{$size-tablet + 1}) {
    @content;
  }
}

@mixin tablet {
  @media (max-width: #{$size-tablet}) {
    @content;
  }
}

@mixin above-mobile-large {
  @media (min-width: #{$size-mobile-large + 1}) {
    @content;
  }
}

@mixin mobile-large {
  @media (max-width: #{$size-mobile-large}) {
    @content;
  }
}

@mixin above-mobile {
  @media (min-width: #{$size-mobile + 1}) {
    @content;
  }
}

@mixin mobile {
  @media (max-width: #{$size-mobile}) {
    @content;
  }
}

@mixin screens-and-below($size){
	@media (max-width: $size){
		@content;
	}
}

@mixin screens-above($size){
	@media (min-width: $size + 1){
		@content;
	}
}

@mixin align-items($value: stretch) {
	@if $value == flex-start {
		-webkit-box-align: start;
		-ms-flex-align: start;
	} @else if $value == flex-end {
		-webkit-box-align: end;
		-ms-flex-align: end;
	} @else {
		-webkit-box-align: $value;
		-ms-flex-align: $value;
	}
	-webkit-align-items: $value;
	-moz-align-items: $value;
	align-items: $value;
}

@mixin align-self($value: auto) {
	-webkit-align-self: $value;
	-moz-align-self: $value;
	@if $value == flex-start {
		-ms-flex-item-align: start;
	} @else if $value == flex-end {
		-ms-flex-item-align: end;
	} @else {
		-ms-flex-item-align: $value;
	}
	align-self: $value;
}

@mixin flexbox($important: false) {
    @if $important == true {
        display: -webkit-box !important;
    	display: -webkit-flex !important;
    	display: -moz-flex !important;
    	display: -ms-flexbox !important;
    	display: flex !important;
    } @else {
        display: -webkit-box;
        display: -webkit-flex;
        display: -moz-flex;
        display: -ms-flexbox;
        display: flex;
    }
}

@mixin inline-flex($important: false) {
    @if $important == true {
    	display: -webkit-inline-box !important;
    	display: -webkit-inline-flex !important;
    	display: -moz-inline-flex !important;
    	display: -ms-inline-flexbox !important;
    	display: inline-flex !important;
    } @else {
        display: -webkit-inline-box;
    	display: -webkit-inline-flex;
    	display: -moz-inline-flex;
    	display: -ms-inline-flexbox;
    	display: inline-flex;
    }
}

@mixin flex-grow($int: 0) {
	-webkit-box-flex: $int;
	-webkit-flex-grow: $int;
	-moz-flex-grow: $int;
	-ms-flex-positive: $int;
	flex-grow: $int;
}

@mixin flex-shrink($shrink) {
  -webkit-flex-shrink: $shrink;
  -moz-flex-shrink: $shrink;
  -ms-flex-shrink: $shrink;
  flex-shrink: $shrink;
}

@mixin flex-basis($value: auto) {
	-webkit-flex-basis: $value;
	-moz-flex-basis: $value;
	-ms-flex-preferred-size: $value;
	flex-basis: $value;
}

@mixin flex($fg: 1, $fs: null, $fb: null) {
	$fg-boxflex: $fg;
	@if type-of($fg) == 'list' {
		$fg-boxflex: nth($fg, 1);
	}
	-webkit-box-flex: $fg-boxflex;
	-webkit-flex: $fg $fs $fb;
	-moz-box-flex: $fg-boxflex;
	-moz-flex: $fg $fs $fb;
	-ms-flex: $fg $fs $fb;
	flex: $fg $fs $fb;
}

@mixin flex-direction($value: row) {
	@if $value == row-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: horizontal;
	} @else if $value == column {
		-webkit-box-direction: normal;
		-webkit-box-orient: vertical;
	} @else if $value == column-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: vertical;
	} @else {
		-webkit-box-direction: normal;
		-webkit-box-orient: horizontal;
	}
	-webkit-flex-direction: $value;
	-moz-flex-direction: $value;
	-ms-flex-direction: $value;
	flex-direction: $value;
}

@mixin flex-wrap($wrap: wrap) {
  -webkit-flex-wrap: $wrap;
     -moz-flex-wrap: $wrap;
      -ms-flex-wrap: $wrap;
          flex-wrap: $wrap;
}

@mixin justify-content($value: flex-start) {
	@if $value == flex-start {
		-webkit-box-pack: start;
		-ms-flex-pack: start;
	} @else if $value == flex-end {
		-webkit-box-pack: end;
		-ms-flex-pack: end;
	} @else if $value == space-between {
		-webkit-box-pack: justify;
		-ms-flex-pack: justify;
	} @else if $value == space-around {
		-ms-flex-pack: distribute;
	} @else {
		-webkit-box-pack: $value;
		-ms-flex-pack: $value;
	}
	-webkit-justify-content: $value;
	-moz-justify-content: $value;
	justify-content: $value;
}


@mixin order($int: 0) {
	-webkit-box-ordinal-group: $int + 1;
	-webkit-order: $int;
	-moz-order: $int;
	-ms-flex-order: $int;
	order: $int;
}

@mixin no-select {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}


@mixin position($position, $pos, $vals) {
  position: $position;
  @each $p in $pos {
    $i: index($pos, $p);
    #{$p}: nth($vals, $i);
  }
}

@mixin transform($args...) {
  -webkit-transform: $args;
  -moz-transform: $args;
  -ms-transform: $args;
  -o-transform: $args;
  transform: $args;
}

@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}

@mixin transform-origin($args...) {
  -webkit-transform-origin: $args;
  -moz-transform-origin: $args;
  -ms-transform-origin: $args;
  -o-transform-origin: $args;
  transform-origin: $args;
}

@mixin noscrollbar{
  -ms-overflow-style: none;
  &::-webkit-scrollbar {
      width: 0px;
      height: 0;
      padding: 0;
      display: none;
      margin: 0;
      border: none;
      background: transparent;
  }
}

@mixin no-highlight {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

@mixin plain-number-input {
    &::-webkit-inner-spin-button,
    &::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }
}

@mixin box-shadow($properties) {
    -webkit-box-shadow: $properties;
    -moz-box-shadow: $properties;
    box-shadow: $properties;
}

@mixin background($image, $size: cover) {
    background-position: center;
    background-size: $size;
    background-repeat: no-repeat;
}

@mixin cut-ends($property: padding) {
    &:first-child {
        #{$property}-left: 0;
    }

    &:last-child {
        #{$property}-right: 0;
    }
}

@mixin increase-width($offset) {
    width: calc(100% + #{$offset * 2});
    position: relative;
    left: -$offset;
}

@mixin filter($value) {
  -webkit-filter: $value;
  -moz-filter: $value;
  -o-filter: $value;
  filter: $value;
}


@mixin font-size-xs {
    font-size: liquid("{{ settings.font_size_xs | append: 'px' }}");
}
@mixin font-size-s {
    font-size: liquid("{{ settings.font_size_s | append: 'px' }}");
    @include mobile-large {
        font-size: 12px;
    }
}

@mixin font-size-m {
    font-size: liquid("{{ settings.font_size_m | append: 'px' }}");
    @include mobile-large {
        font-size: 13px;
    }
}
@mixin font-size-l {
    font-size: liquid("{{ settings.font_size_l | append: 'px' }}");
}
@mixin font-size-xl {
    font-size: liquid("{{ settings.font_size_xl | append: 'px' }}");
    @include mobile-large {
        font-size: 14px;
    }
}
@mixin font-size-xxl {
    font-size: liquid("{{ settings.font_size_xxl | append: 'px' }}");
    @include mobile-large {
        font-size: 16px;
    }
}


@mixin image-hover-zoom($element: 'image-wrapper', $scale: 1.05) {
    @include above-tablet {
        @if $element == 'image-parent' {
            &:hover img {
                @include transform(scale($scale))
            }
        } @else {
            overflow: hidden;

            img {
                @include transition($transition-default)
            }
        }
    }
}


@mixin flex-center{
  @include flexbox;
  @include justify-content(center);
}

@mixin flex-center-vertical{
  @include flexbox;
  @include justify-content(center);
  @include align-items(center);
}